
--Race Context
SELECT  DISTINCT
		R.DATE,
		--R.RACEID,
		R.NAME AS RACE_NAME,
		R.ROUND,
		--C.CIRCUITID,
		C.CIRCUITREF,
		C.NAME AS CIRCUIT_NAME,
		C.LOCATION,
		C.COUNTRY,
		S.YEAR AS SEASON
FROM RACES R
LEFT JOIN CIRCUITS C
ON R.CIRCUITID = C.CIRCUITID
LEFT JOIN SEASONS S
ON R.YEAR = S.YEAR
ORDER BY R.DATE


--Races McLaren won each season
SELECT	R.YEAR AS SEASON, 
		COUNT(*) AS McLaren_WINS,
		(SELECT COUNT(*) 
		    FROM RACES R2
		    WHERE R2.YEAR = R.YEAR) AS NUMBER_OF_RACES
FROM RESULTS RE
JOIN RACES R ON RE.RACEID = R.RACEID
JOIN CONSTRUCTORS C ON RE.CONSTRUCTORID = C.CONSTRUCTORID
WHERE C.NAME = 'McLaren' AND RE.POSITION = 1
GROUP BY R.YEAR
ORDER BY R.YEAR

--McLaren Drivers 
SELECT	DISTINCT CONCAT(D.FORENAME, ' ', D.SURNAME) AS DRIVER_NAME,
		MAX(R.YEAR) AS LATEST_RACE_YEAR,
		DATEDIFF(YEAR, D.DOB, MAX(R.DATE)) AS AGE_AT_LAST_RACE
FROM RESULTS RE
JOIN CONSTRUCTORS CON ON RE.CONSTRUCTORID = CON.CONSTRUCTORID
JOIN DRIVERS D ON RE.DRIVERID = D.DRIVERID 
JOIN RACES R ON RE.RACEID = R.RACEID
WHERE CON.NAME = 'McLaren'
GROUP BY CON.NAME, D.DRIVERID, D.FORENAME, D.SURNAME, D.DOB
ORDER BY LATEST_RACE_YEAR DESC;

--McLaren' Races won per driver
SELECT	CONCAT(D.FORENAME, ' ', D.SURNAME) AS DRIVER_NAME,
		COUNT(*) AS WINS
FROM RESULTS RE
JOIN CONSTRUCTORS C 
ON RE.CONSTRUCTORID = C.CONSTRUCTORID
JOIN DRIVERS D 
ON RE.DRIVERID = D.DRIVERID
WHERE C.NAME = 'McLaren' AND RE.POSITION = 1
GROUP BY CONCAT(D.FORENAME, ' ', D.SURNAME)
ORDER BY WINS DESC;

--McLaren points scored per season
SELECT	R.YEAR, 
		SUM(CONVERT(decimal, RE.POINTS)) AS TOTAL_POINTS,
		(SELECT COUNT(*) 
		    FROM RACES R2
		    WHERE R2.YEAR = R.YEAR) AS NUMBER_OF_RACES
FROM RESULTS RE
JOIN RACES R ON RE.RACEID = R.RACEID
JOIN CONSTRUCTORS C ON RE.CONSTRUCTORID = C.CONSTRUCTORID
WHERE C.NAME = 'McLaren'
GROUP BY R.YEAR
ORDER BY R.YEAR DESC


--McLaren Points Per Season, Win/Loss
WITH ConstructorPoints AS (
    SELECT 
        R.YEAR,
        C.NAME AS CONSTRUCTOR_NAME,
        SUM(CONVERT(decimal, RE.POINTS)) AS TOTAL_POINTS
    FROM RESULTS RE
    JOIN RACES R ON RE.RACEID = R.RACEID
    JOIN CONSTRUCTORS C ON RE.CONSTRUCTORID = C.CONSTRUCTORID
    GROUP BY R.YEAR, C.NAME
),
MaxPointsPerYear AS (
    SELECT 
        YEAR,
        MAX(TOTAL_POINTS) AS MAX_POINTS
    FROM ConstructorPoints
    GROUP BY YEAR
)
SELECT 
    CP.YEAR,
    CP.TOTAL_POINTS,
    (SELECT COUNT(*) FROM RACES R2 WHERE R2.YEAR = CP.YEAR) AS NUMBER_OF_RACES,
    CASE 
        WHEN CP.TOTAL_POINTS = MP.MAX_POINTS THEN 'Won'
        ELSE 'Lost'
    END AS RESULT
FROM ConstructorPoints CP
JOIN MaxPointsPerYear MP ON CP.YEAR = MP.YEAR
WHERE CP.CONSTRUCTOR_NAME = 'McLaren'
ORDER BY CP.YEAR DESC

--Average finishing position for McLaren drivers
SELECT  R.YEAR, 
		AVG(RE.POSITIONORDER) AS AVG_FINISH_POSITION
FROM RESULTS RE
JOIN RACES R ON RE.RACEID = R.RACEID
JOIN CONSTRUCTORS C ON RE.CONSTRUCTORID = C.CONSTRUCTORID
WHERE C.NAME = 'McLaren'
GROUP BY R.YEAR
ORDER BY R.YEAR DESC



--Which circuits/countries has McLaren dominated most (most wins)?
SELECT C.NAME AS CIRCUIT_NAME,
        C.COUNTRY, 
        COUNT(*) AS McLaren_WINS
FROM RESULTS RE
JOIN RACES R
ON RE.RACEID = R.RACEID
JOIN CIRCUITS C
ON R.CIRCUITID = C.CIRCUITID
JOIN CONSTRUCTORS CON
ON RE.CONSTRUCTORID = CON.CONSTRUCTORID
WHERE CON.NAME = 'McLaren' AND RE.POSITION = 1
GROUP BY C.NAME, C.COUNTRY 
ORDER BY McLaren_WINS DESC 



-- How often did McLaren drivers set the fastest lap in a race?
SELECT 
    d.FORENAME + ' ' + d.SURNAME AS driver_name,
    COUNT(*) AS fastest_laps
FROM LAP_TIMES lt
JOIN (
    SELECT RACEID, MIN(MILLISECONDS) AS fastest_time
    FROM LAP_TIMES
    GROUP BY RACEID
) ft ON lt.RACEID = ft.RACEID AND lt.MILLISECONDS = ft.fastest_time
JOIN RESULTS res ON lt.RACEID = res.RACEID AND lt.DRIVERID = res.DRIVERID
JOIN CONSTRUCTORS c ON res.CONSTRUCTORID = c.CONSTRUCTORID
JOIN DRIVERS d ON res.DRIVERID = d.DRIVERID
WHERE LOWER(c.NAME) = 'McLaren'
GROUP BY d.FORENAME, d.SURNAME
ORDER BY fastest_laps DESC;


--How often are McLaren drivers starting on the front row (GRID = 1 or 2)?
SELECT 
    d.FORENAME + ' ' + d.SURNAME AS driver_name,
    COUNT(*) AS front_row_starts
FROM RESULTS res
JOIN CONSTRUCTORS c ON res.CONSTRUCTORID = c.CONSTRUCTORID
JOIN DRIVERS d ON res.DRIVERID = d.DRIVERID
WHERE 
    LOWER(c.NAME) = 'McLaren'
    AND res.GRID IN (1, 2)
GROUP BY (d.FORENAME + ' ' + d.SURNAME)
ORDER BY front_row_starts DESC;

-- What is the correlation between starting position and final position for McLaren?
SELECT RE.RACEID, RE.GRID, RE.POSITIONORDER
FROM RESULTS RE
JOIN CONSTRUCTORS C ON RE.CONSTRUCTORID = C.CONSTRUCTORID
WHERE C.NAME = 'McLaren';


-- Do McLaren drivers complete more laps on average than others?
SELECT 
    d.FORENAME + ' ' + d.SURNAME AS driver_name,
    COUNT(DISTINCT lt.RACEID) AS races_participated,
    COUNT(*) AS total_laps_completed,
    ROUND(COUNT(*) * 1.0 / COUNT(DISTINCT lt.RACEID), 2) AS avg_laps_per_race
FROM LAP_TIMES lt
JOIN DRIVERS d ON lt.DRIVERID = d.DRIVERID
JOIN RESULTS r ON lt.RACEID = r.RACEID AND lt.DRIVERID = r.DRIVERID
JOIN CONSTRUCTORS c ON r.CONSTRUCTORID = c.CONSTRUCTORID
WHERE lt.MILLISECONDS IS NOT NULL AND C.NAME= 'McLaren'
GROUP BY d.FORENAME, d.SURNAME, c.NAME
ORDER BY avg_laps_per_race DESC;

SELECT AVG(RE.LAPS) AS AVG_LAPS_COMPLETED
FROM RESULTS RE
JOIN CONSTRUCTORS C ON RE.CONSTRUCTORID = C.CONSTRUCTORID
WHERE C.NAME = 'McLaren';


--Which McLaren driver has the most podium finishes (positions 1–3)?
SELECT 
    d.FORENAME + ' ' + d.SURNAME AS driver_name,
    SUM(CASE WHEN res.POSITION = 1 THEN 1 ELSE 0 END) AS first_places,
    SUM(CASE WHEN res.POSITION = 2 THEN 1 ELSE 0 END) AS second_places,
    SUM(CASE WHEN res.POSITION = 3 THEN 1 ELSE 0 END) AS third_places,
    COUNT(*) AS total_podiums
FROM RESULTS res
JOIN CONSTRUCTORS c ON res.CONSTRUCTORID = c.CONSTRUCTORID
JOIN DRIVERS d ON res.DRIVERID = d.DRIVERID
WHERE 
    LOWER(c.NAME) = 'McLaren'
    AND res.POSITION IN (1, 2, 3)
GROUP BY (d.FORENAME + ' ' + d.SURNAME)
ORDER BY total_podiums DESC


--What is McLaren’ driver lineup per year and how consistent has it been?
SELECT  DISTINCT R.YEAR, 
		CONCAT(D.FORENAME, ' ', D.SURNAME) AS DRIVER_NAME
FROM RESULTS RE
JOIN RACES R ON RE.RACEID = R.RACEID
JOIN CONSTRUCTORS C ON RE.CONSTRUCTORID = C.CONSTRUCTORID
JOIN DRIVERS D ON RE.DRIVERID = D.DRIVERID
WHERE C.NAME = 'McLaren'
ORDER BY R.YEAR, DRIVER_NAME;


--How many races has McLaren failed to finish (DNFs)?
WITH driver_race_counts AS (
    SELECT 
        d.DRIVERID,
        CONCAT(d.FORENAME, ' ', d.SURNAME) AS driver_name,
        COUNT(*) AS total_races
    FROM RESULTS res
    JOIN CONSTRUCTORS c ON res.CONSTRUCTORID = c.CONSTRUCTORID
    JOIN DRIVERS d ON res.DRIVERID = d.DRIVERID
    WHERE LOWER(c.NAME) = 'McLaren'
    GROUP BY d.DRIVERID, CONCAT(d.FORENAME, ' ', d.SURNAME)
),

dnf_counts AS (
    SELECT 
        d.DRIVERID,
        CONCAT(d.FORENAME, ' ', d.SURNAME) AS driver_name,
        COUNT(*) AS dnf_count
    FROM RESULTS res
    JOIN CONSTRUCTORS c ON res.CONSTRUCTORID = c.CONSTRUCTORID
    JOIN DRIVERS d ON res.DRIVERID = d.DRIVERID
    JOIN STATUS s ON res.STATUSID = s.STATUSID
    WHERE LOWER(c.NAME) = 'McLaren'
      AND LOWER(s.STATUS) NOT IN ('finished', '1 lap', '2 laps', '3 laps')
    GROUP BY d.DRIVERID, CONCAT(d.FORENAME, ' ', d.SURNAME)
)

--Join both metric
SELECT 
    r.driver_name,
    r.total_races,
    COALESCE(d.dnf_count, 0) AS dnf_count
FROM driver_race_counts r
LEFT JOIN dnf_counts d ON r.DRIVERID = d.DRIVERID

UNION ALL

--TOTAL row
SELECT 
    'TOTAL' AS driver_name,
    COUNT(*) AS total_races,
    SUM(CASE 
        WHEN LOWER(s.STATUS) NOT IN ('finished', '1 lap', '2 laps', '3 laps') 
        THEN 1 ELSE 0 
    END) AS dnf_count
FROM RESULTS res
JOIN CONSTRUCTORS c ON res.CONSTRUCTORID = c.CONSTRUCTORID
JOIN STATUS s ON res.STATUSID = s.STATUSID
WHERE LOWER(c.NAME) = 'McLaren'

ORDER BY dnf_count DESC;


--Fearure Table Query 
WITH PIT_SUMMARY AS (
    SELECT
        RACEID,
        DRIVERID,
        COUNT(*) AS PIT_COUNT,
        AVG(TRY_CAST(DURATION AS FLOAT)) AS AVG_PIT_DURATION,
        SUM(TRY_CAST(DURATION AS FLOAT)) AS TOTAL_PIT_TIME
    FROM PIT_STOPS
    WHERE TRY_CAST(DURATION AS FLOAT) IS NOT NULL
    GROUP BY RACEID, DRIVERID
)


SELECT
    CON.NAME AS CONSTRUCTOR_NAME,
    CONCAT(D.FORENAME, ' ', D.SURNAME) AS DRIVER_NAME,
    D.NATIONALITY AS DRIVER_NATIONALITY,
    R.ROUND,
    S.YEAR AS SEASON,
    C.NAME AS CIRCUIT_NAME,
    C.LOCATION,
    C.COUNTRY,
    
    RE.GRID,
    RE.POSITION,
	ST.STATUS,
    RE.POINTS,
    RE.LAPS,
    RE.TIME,
    RE.MILLISECONDS AS TIME_IN_MILLISECONDS,

    (CAST(PARSENAME(REPLACE(Q1, ':', '.'), 2) AS INT) * 60000) +
	(CAST(PARSENAME(REPLACE(Q1, ':', '.'), 1) AS FLOAT) * 1000)
    AS Q1_IN_MILLISECONDS, 
	(CAST(PARSENAME(REPLACE(Q2, ':', '.'), 2) AS INT) * 60000) +
	(CAST(PARSENAME(REPLACE(Q2, ':', '.'), 1) AS FLOAT) * 1000)
    AS Q2_IN_MILLISECONDS, 
	(CAST(PARSENAME(REPLACE(Q3, ':', '.'), 2) AS INT) * 60000) +
	(CAST(PARSENAME(REPLACE(Q3, ':', '.'), 1) AS FLOAT) * 1000)
    AS Q3_IN_MILLISECONDS,

    PS.PIT_COUNT,
    REPLACE(PS.AVG_PIT_DURATION, ',','.') AS AVG_PIT_DURATION,
	REPLACE(PS.TOTAL_PIT_TIME, ',','.') AS TOTAL_PIT_TIME

FROM RESULTS RE
LEFT JOIN RACES R 
	ON RE.RACEID = R.RACEID
LEFT JOIN DRIVERS D 
	ON RE.DRIVERID = D.DRIVERID
LEFT JOIN CONSTRUCTORS CON 
	ON RE.CONSTRUCTORID = CON.CONSTRUCTORID
LEFT JOIN CIRCUITS C 
	ON R.CIRCUITID = C.CIRCUITID
LEFT JOIN SEASONS S 
	ON R.YEAR = S.YEAR
LEFT JOIN QUALIFYING Q 
    ON RE.RACEID = Q.RACEID AND RE.DRIVERID = Q.DRIVERID AND RE.CONSTRUCTORID = Q.CONSTRUCTORID
LEFT JOIN PIT_SUMMARY PS 
    ON RE.RACEID = PS.RACEID AND RE.DRIVERID = PS.DRIVERID
LEFT JOIN STATUS ST
	ON RE.STATUSID = ST.STATUSID

WHERE CON.NAME = 'McLaren'
AND RE.POSITION IS NOT NULL --only valid finishing positions
AND RE.GRID IS NOT NULL
AND PS.TOTAL_PIT_TIME IS NOT NULL
AND PS.AVG_PIT_DURATION IS NOT NULL
AND RE.MILLISECONDS IS NOT NULL
ORDER BY S.YEAR, R.ROUND, RE.POSITION;
